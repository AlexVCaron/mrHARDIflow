// Algorithms configuration
// ------------------------
//
//  Due to the variety of the possible configurations of some algorithms and
//  to the plurality of options they offer, their specific configuration has
//  been extracted to separate files. Here is listed all of the algorithms
//  and there related configuration entry point. Using it, users can input
//  a per study configuration for those, by either using the parameters
//  params.* inside their nextflow.config file, supplying the complete path
//  to the configuration file associated, of supplying them via their command
//  line call to nextflow (using the name of the parameter after params.).
//
//  The configuration files must be placed in a directory accessible to the
//  execution of Nextflow, we suggest putting them at the root of the
//  execution of Nextflow for each study. To build a valid configuration
//  file, either call
//       magic-monkey <name of app> --out-config <name_of_config_file>
//
//  or refer to those present in the .config directory. Take not however that
//  those have been tailored for a global execution for most studies and that
//  their content won't necessarily reflect the entire configuration possible.

// Preprocessing algorithms global configuration
// ---------------------------------------------
// - Topup correction       : params.prepare_topup_base_config
// - Eddy correction        : params.prepare_eddy_base_config
// - Eddy correction (CUDA) : params.prepare_eddy_cuda_base_config
// - N4 normalization (DWI) : params.dwi_n4_normalization_config
// - N4 normalization (T1)  : params.t1_n4_normalization_config
// - ANTs registration      : params.ants_registration_basic_config
// - ANTs apply transform   : params.ants_transform_base_config

// Utilitary algorithms global configuration
// -----------------------------------------
// - Concatenation            : params.concatenate_base_config
// - Shell extraction (n > 1) : params.extract_shell_greater_than_one_config
// - B0 mean extraction       : params.extract_mean_b0_base_config

// Workflow specific configuration
// -------------------------------
// - Pre-denoise T1 to b0 mask registration : params.pre_denoise_mask_registration_config
// - Topup B0 extraction                    : params.preproc_extract_b0_topup_config
// - Pre-Eddy B0 set reduction              : params.preproc_squash_b0_config

// T1 t0 b0 registration configuration
// -----------------------------------
// - Base registration (Rigid + Affine)      : params.t1_registration_base_registration_config
// - SyN registration  (t1 -> b0 + t1 -> FA) : params.t1_registration_syn_registration_config

// Inter-repetition registration configuration (b0 to b0 + t1 to b0)
// -----------------------------------------------------------------
// - b0 to b0 registration : params.reps_registration_b0_registration_config
// - t1 to b0 registration : params.reps_registration_t1_registration_config
// - Apply registration    : params.reps_registration_apply_registration_config

// Reconstruction algorithms configuration
// ---------------------------------------
// - Diamond           : params.reconstruct_diamond_config
// - DTI               : params.reconstruct_mrtrix_dti_config
// - CSD               : params.reconstruct_mrtrix_csd_config
// - Response function : params.reconstruct_mrtrix_frf_config

// Measures on reconstructions algorithms configuration
// ----------------------------------------------------
// - Measures on Diamond : params.measures_on_diamond_config
// - Measures on DTI     : params.measures_on_dti_config

params.metadata = {}

// BASIC RESOURCES ALLOCATION FOR PROCESSES

// Use gpu if available
params.use_cuda = true

// Resources conservation
params.conservative_resources = true
params.free_processes = 1
params.memory_buffer_gb = 10
params.max_cpu_per_process = null
params.max_attempts = 3


// IO PARAMETRIZATION

// Inputs declaration
params.data_root = false
params.metadata.readout = 0.062487
params.metadata.multiband = 2
params.metadata.interleaved = true
params.metadata.slice_direction = "SI"
params.metadata.direction = "PA"
params.metadata.acquisition = "Linear"
params.rev_is_b0 = false
params.has_reverse = false
params.masked_dwi = false

// Outputs declaration
params.output_root = "outputs"
params.publish_all = true
params.publish_mode = "copy"
params.verbose_outputs = false

// WORKFLOWS PARAMETRIZATION

// Repetition preprocessing parameters
params.merge_repetitions = false
params.register_repetitions = false

// Global preprocessing parameters
params.intensity_normalization = true
params.resample_data = true
params.resampling_resolution = 0.4
params.force_resampling_sequential = true

// T1 preprocessing parameters
params.masked_t1 = true
params.t1mask2dwi_registration = true
params.register_t12b0_denoised = true
params.register_syn_t12b0 = true
params.register_syn_t12b0_with_mask = true
params.denoise_t1 = true
params.nlmeans_t1 = true

// DWI preprocessing parameters

// Initial denoising
params.gaussian_noise_correction = true
params.gibbs_ringing_correction = false
params.normalize_inter_b0 = true

// Topup
params.topup_correction = true

// Eddy
params.eddy_correction = false
params.eddy_force_shelled = true
params.eddy_on_rev = true
params.eddy_select_gpu = true
params.eddy_pre_bet_mask = false

// DWI reconstruction parameters
params.reconstruct_use_mrtrix = false

// DTI
params.recons_dti = true

// CSD
params.recons_csd = true
params.msmt_odf = true
params.seg_on_t1 = true
params.convert_tournier2descoteaux = true
params.frf_fa = 0.75
params.frf_min_fa = 0.55
params.frf_min_nvox = 200
params.frf_radii = false
params.frf_center = false
params.max_fa_ventricle = 0.15
params.min_md_ventricle = 0.0012
params.ventricles_center = false
params.fodf_max_absolute_factor = 2.0
params.fodf_relative_thr = 0.2
params.sh_order = 8

// DIAMOND
params.recons_diamond = true

// Miscellaneous
params.bet.f = 0.65

// Resources allocation -- DO NOT TOUCH --
import com.sun.management.OperatingSystemMXBean
import java.lang.management.ManagementFactory
if ( !executor || executor.name == "local" ) {
    def count = 0
    def avail_cpus = 0
    while ( count < 10 ) {
        check_cpus = Runtime.runtime.availableProcessors()
        avail_cpus = (check_cpus > avail_cpus) ? check_cpus : avail_cpus
        count += 1
    }

    if ( params.processes ) {
        if(params.processes > avail_cpus) {
            throw new RuntimeException(
                "Number of processes higher than available CPUs."
            )
        }
        else if(params.processes < 1) {
            throw new RuntimeException(
                "When set, number of processes must be >= 1 " +
                "and smaller or equal to the number of CPUs."
            )
        }
    }
    else {
        params.processes = avail_cpus
    }

    def sysmem = ((OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean()).getTotalPhysicalMemorySize() / 1073741824
    if ( params.memory_buffer_gb )
        sysmem -= params.memory_buffer_gb

    executor.$local.memory = "${sysmem}GB"
    executor.$local.cpus = params.processes
}

process {
    withLabel: res_single_cpu { cpus = 1 }
    withLabel: res_max_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < params.processes) ? params.max_cpu_per_process : params.processes }
    withLabel: res_conservative_cpu { cpus = params.max_cpu_per_process && (params.max_cpu_per_process < Math.max(1, params.processes - params.free_processes)) ? params.max_cpu_per_process : Math.max(1, params.processes - params.free_processes) }
    withLabel: hcp_full_node_override { cpus = params.processes }
}

singularity.autoMounts = true
singularity.runOptions = "--nv"
docker.runOptions = "--gpus all"


// Required environment variables
env.FSLOUTPUTTYPE = 'NIFTI_GZ'

params.on_hcp = false
// Configuration profiles
profiles {
    hcp {
        params.on_hcp = true
        process.executor = 'ignite'
        process.scratch = true
        process.stageInMode = 'copy'
        process.stageOutMode = 'rsync'
    }
    hcp_local {
        params.on_hcp = true
        process.scratch = true
        process.stageInMode = 'copy'
        process.stageOutMode = 'rsync'
    }
}

process {
    errorStrategy = {
        if (task.attempt <= params.max_attempts){
            sleep(Math.pow(2, task.attempt) * 200 as long);
            return 'retry'
        } else return 'ignore'
    }
    maxRetries = params.max_attempts
    maxErrors = -1
}