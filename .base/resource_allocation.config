// Resources allocation -- DO NOT TOUCH --
params.memory_buffer_gb = 6
params.pipeline_min_ram_gb = 26
params.check_memory_requirements = false

import com.sun.management.OperatingSystemMXBean
import java.lang.management.ManagementFactory
def sysmem = ((OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean()).getTotalPhysicalMemorySize() / 1073741824
params.max_system_memory = sysmem

if ( !params.check_memory_requirements ) {
    if ( sysmem < params.pipeline_min_ram_gb ) {
        throw new RuntimeException(
            "The pipeline requires at least ${params.pipeline_min_ram_gb}GB of " +
            "RAM to run and only ${sysmem}GB are available on the system."
        )
    }

    if ( params.memory_buffer_gb && (params.memory_buffer_gb + params.pipeline_min_ram_gb) > sysmem ) {
        throw new RuntimeException(
            "The pipeline requires at least ${params.pipeline_min_ram_gb}GB of RAM to run." +
            "Consider decreasing the current RAM buffer (${params.memory_buffer_gb}GB) " +
            "allocated for the system using --memory_buffer_gb or running the pipeline " + 
            "on a machine with more resources."
        )
    }
}


if ( !executor || executor.name == "local" ) {
    def count = 0
    def avail_cpus = 0
    while ( count < 10 ) {
        check_cpus = Runtime.runtime.availableProcessors()
        avail_cpus = (check_cpus > avail_cpus) ? check_cpus : avail_cpus
        count += 1
    }

    if ( params.processes ) {
        if(params.processes > avail_cpus) {
            throw new RuntimeException(
                "Number of processes higher than available CPUs."
            )
        }
        else if(params.processes < 1) {
            throw new RuntimeException(
                "When set, number of processes must be >= 1 " +
                "and smaller or equal to the number of CPUs."
            )
        }
    }
    else {
        params.processes = avail_cpus
    }

    executor.$local.memory = "${sysmem - params.memory_buffer_gb}GB"
    executor.$local.cpus = params.processes
}